"""
sistema_estoque_completo_v3.py
Vers√£o 3: adiciona:
 - Dar baixa no estoque (janela separada, salvo no JSON)
 - Relat√≥rio de TODOS os materiais (janela separada)
 - Continua salvando/carregando automaticamente em estoque.json
"""

import tkinter as tk
from tkinter import ttk, messagebox
import json
import os
import csv

# --------------------------
# Config / arquivo de dados
# --------------------------
ARQUIVO_ESTOQUE = "estoque.json"

# --------------------------
# Fun√ß√µes de persist√™ncia
# --------------------------
def carregar_estoque():
    if os.path.exists(ARQUIVO_ESTOQUE):
        try:
            with open(ARQUIVO_ESTOQUE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            messagebox.showwarning("Aviso", "Arquivo de dados corrompido. Iniciando estoque vazio.")
            return []
    return []

def salvar_estoque():
    with open(ARQUIVO_ESTOQUE, "w", encoding="utf-8") as f:
        json.dump(estoque, f, indent=4, ensure_ascii=False)

# --------------------------
# Dados carregados na inicializa√ß√£o
# --------------------------
estoque = carregar_estoque()

# --------------------------
# Util: atualiza tabela (gen√©rica)
# --------------------------
def atualizar_tabela(tabela):
    for item in tabela.get_children():
        tabela.delete(item)
    for produto in estoque:
        tabela.insert("", "end", values=(produto["codigo"], produto["nome"], produto["quantidade"]))

# --------------------------
# Janela: Cadastro de produto
# --------------------------
def janela_cadastro():
    cadastro = tk.Toplevel(root)
    cadastro.title("üì¶ Cadastro de Produtos")
    cadastro.geometry("520x420")
    cadastro.configure(bg="#f4f7ff")

    tk.Label(cadastro, text="CADASTRO DE PRODUTOS", font=("Arial", 15, "bold"), bg="#3F51B5", fg="white", pady=10).pack(fill="x")

    frame = tk.Frame(cadastro, bg="#f4f7ff")
    frame.pack(pady=15)

    tk.Label(frame, text="C√≥digo:", bg="#f4f7ff", font=("Arial", 11)).grid(row=0, column=0, padx=6, pady=6, sticky="w")
    entrada_codigo = tk.Entry(frame, width=36)
    entrada_codigo.grid(row=0, column=1, padx=6, pady=6)

    tk.Label(frame, text="Nome:", bg="#f4f7ff", font=("Arial", 11)).grid(row=1, column=0, padx=6, pady=6, sticky="w")
    entrada_nome = tk.Entry(frame, width=36)
    entrada_nome.grid(row=1, column=1, padx=6, pady=6)

    tk.Label(frame, text="Quantidade:", bg="#f4f7ff", font=("Arial", 11)).grid(row=2, column=0, padx=6, pady=6, sticky="w")
    entrada_qtd = tk.Entry(frame, width=36)
    entrada_qtd.grid(row=2, column=1, padx=6, pady=6)

    def salvar_produto():
        codigo = entrada_codigo.get().strip()
        nome = entrada_nome.get().strip()
        qtd = entrada_qtd.get().strip()

        if codigo == "" or nome == "" or qtd == "":
            messagebox.showwarning("‚ö†Ô∏è Aten√ß√£o", "Preencha todos os campos!")
            return

        # evita duplicar c√≥digo
        for p in estoque:
            if p["codigo"] == codigo:
                messagebox.showwarning("Erro", "J√° existe um produto com esse c√≥digo!")
                return

        try:
            qtd_int = int(qtd)
            if qtd_int < 0:
                raise ValueError
        except ValueError:
            messagebox.showwarning("Erro", "Quantidade inv√°lida! Use n√∫mero inteiro >= 0.")
            return

        estoque.append({"codigo": codigo, "nome": nome, "quantidade": qtd_int})
        salvar_estoque()  # salva imediatamente
        entrada_codigo.delete(0, tk.END)
        entrada_nome.delete(0, tk.END)
        entrada_qtd.delete(0, tk.END)
        messagebox.showinfo("‚úÖ Sucesso", f"Produto '{nome}' cadastrado!")

    tk.Button(cadastro, text="Salvar Produto", bg="#4CAF50", fg="white", font=("Arial", 11, "bold"), width=18, command=salvar_produto).pack(pady=12)
    tk.Button(cadastro, text="Fechar", bg="#9E9E9E", fg="white", width=18, command=cadastro.destroy).pack()

# --------------------------
# Janela: Consulta / Pesquisa (permite selecionar item)
# --------------------------
def janela_consulta():
    consulta = tk.Toplevel(root)
    consulta.title("üîç Consulta de Produtos")
    consulta.geometry("720x450")
    consulta.configure(bg="#f4f7ff")

    tk.Label(consulta, text="CONSULTA DE PRODUTOS", font=("Arial", 15, "bold"), bg="#2196F3", fg="white", pady=10).pack(fill="x")

    frame_busca = tk.Frame(consulta, bg="#f4f7ff")
    frame_busca.pack(pady=10, padx=8, fill="x")

    tk.Label(frame_busca, text="Pesquisar por nome ou c√≥digo:", bg="#f4f7ff").grid(row=0, column=0, padx=5, sticky="w")
    entrada_pesquisa = tk.Entry(frame_busca, width=40)
    entrada_pesquisa.grid(row=0, column=1, padx=5, sticky="w")

    # Tabela com scroll
    colunas = ("C√≥digo", "Nome", "Quantidade")
    tabela = ttk.Treeview(consulta, columns=colunas, show="headings", height=15)
    tabela.heading("C√≥digo", text="C√≥digo")
    tabela.heading("Nome", text="Nome")
    tabela.heading("Quantidade", text="Quantidade")
    tabela.column("C√≥digo", width=120, anchor="center")
    tabela.column("Nome", width=420)
    tabela.column("Quantidade", width=120, anchor="center")

    vsb = ttk.Scrollbar(consulta, orient="vertical", command=tabela.yview)
    tabela.configure(yscroll=vsb.set)
    tabela.pack(side="left", fill="both", expand=True, padx=(10,0), pady=10)
    vsb.pack(side="left", fill="y", pady=10)

    atualizar_tabela(tabela)

    def pesquisar():
        termo = entrada_pesquisa.get().strip().lower()
        for it in tabela.get_children():
            tabela.delete(it)
        for p in estoque:
            if termo == "" or termo in p["codigo"].lower() or termo in p["nome"].lower():
                tabela.insert("", "end", values=(p["codigo"], p["nome"], p["quantidade"]))

    def selecionar_e_copiar_codigo():
        # copia o c√≥digo do item selecionado para a √°rea de transfer√™ncia do sistema operacional
        sel = tabela.selection()
        if not sel:
            messagebox.showwarning("Aten√ß√£o", "Selecione um produto na tabela primeiro.")
            return
        vals = tabela.item(sel[0], "values")
        codigo = vals[0]
        root.clipboard_clear()
        root.clipboard_append(codigo)
        messagebox.showinfo("Copiado", f"C√≥digo '{codigo}' copiado para a √°rea de transfer√™ncia.")

    # Bot√µes da consulta
    btn_pesquisar = tk.Button(frame_busca, text="Pesquisar", bg="#2196F3", fg="white", command=pesquisar)
    btn_pesquisar.grid(row=0, column=2, padx=8)
    btn_copiar = tk.Button(frame_busca, text="Copiar C√≥digo", bg="#9E9E9E", fg="white", command=selecionar_e_copiar_codigo)
    btn_copiar.grid(row=0, column=3, padx=8)

    # Bot√£o fechar
    tk.Button(consulta, text="Fechar", bg="#9E9E9E", fg="white", width=16, command=consulta.destroy).pack(side="bottom", pady=8)

# --------------------------
# Janela: Dar Baixa no Estoque (selecionar por c√≥digo ou selecionar linha)
# --------------------------
def janela_dar_baixa():
    baixa = tk.Toplevel(root)
    baixa.title("‚¨áÔ∏è Dar Baixa no Estoque")
    baixa.geometry("600x380")
    baixa.configure(bg="#fffaf0")

    tk.Label(baixa, text="DAR BAIXA NO ESTOQUE", font=("Arial", 15, "bold"), bg="#FFB74D", fg="white", pady=10).pack(fill="x")

    frame = tk.Frame(baixa, bg="#fffaf0")
    frame.pack(pady=10, padx=8, fill="x")

    # permite buscar pelo c√≥digo ou selecionar na tabela abaixo
    tk.Label(frame, text="Digite o C√ìDIGO do produto (ou selecione na tabela):", bg="#fffaf0").grid(row=0, column=0, sticky="w", padx=5)
    entrada_codigo_baixa = tk.Entry(frame, width=30)
    entrada_codigo_baixa.grid(row=0, column=1, padx=5)

    tk.Label(frame, text="Quantidade a dar baixa:", bg="#fffaf0").grid(row=1, column=0, sticky="w", padx=5, pady=6)
    entrada_qtd_baixa = tk.Entry(frame, width=20)
    entrada_qtd_baixa.grid(row=1, column=1, padx=5, pady=6, sticky="w")

    # Tabela para selecionar produto facilmente
    colunas = ("C√≥digo", "Nome", "Quantidade")
    tabela = ttk.Treeview(baixa, columns=colunas, show="headings", height=10)
    tabela.heading("C√≥digo", text="C√≥digo")
    tabela.heading("Nome", text="Nome")
    tabela.heading("Quantidade", text="Quantidade")
    tabela.column("C√≥digo", width=120, anchor="center")
    tabela.column("Nome", width=340)
    tabela.column("Quantidade", width=120, anchor="center")
    tabela.pack(side="left", fill="both", expand=True, padx=(10,0), pady=10)

    vsb = ttk.Scrollbar(baixa, orient="vertical", command=tabela.yview)
    tabela.configure(yscroll=vsb.set)
    vsb.pack(side="left", fill="y", pady=10)

    atualizar_tabela(tabela)

    def preencher_codigo_por_selecao(event=None):
        sel = tabela.selection()
        if sel:
            vals = tabela.item(sel[0], "values")
            entrada_codigo_baixa.delete(0, tk.END)
            entrada_codigo_baixa.insert(0, vals[0])

    tabela.bind("<<TreeviewSelect>>", preencher_codigo_por_selecao)

    def confirmar_baixa():
        codigo = entrada_codigo_baixa.get().strip()
        qtd_text = entrada_qtd_baixa.get().strip()

        if codigo == "" or qtd_text == "":
            messagebox.showwarning("Aten√ß√£o", "Informe o c√≥digo e a quantidade a dar baixa.")
            return

        try:
            qtd = int(qtd_text)
            if qtd <= 0:
                raise ValueError
        except ValueError:
            messagebox.showwarning("Erro", "Quantidade inv√°lida! Use inteiro > 0.")
            return

        # procura o produto pelo c√≥digo
        for p in estoque:
            if p["codigo"] == codigo:
                if p["quantidade"] < qtd:
                    messagebox.showwarning("Erro", "Quantidade maior que o estoque dispon√≠vel!")
                    return
                p["quantidade"] -= qtd
                salvar_estoque()
                atualizar_tabela(tabela)
                messagebox.showinfo("Sucesso", f"Baixa de {qtd} unidade(s) realizada no produto '{p['nome']}'.")
                entrada_codigo_baixa.delete(0, tk.END)
                entrada_qtd_baixa.delete(0, tk.END)
                return

        messagebox.showwarning("Erro", "Produto com esse c√≥digo n√£o encontrado.")

    btn_confirm = tk.Button(frame, text="Confirmar Baixa", bg="#FF9800", fg="white", font=("Arial", 11, "bold"), command=confirmar_baixa)
    btn_confirm.grid(row=2, column=0, columnspan=2, pady=8)

# --------------------------
# Janela: Relat√≥rio de Estoque Baixo (j√° existente)
# --------------------------
def janela_estoque_baixo():
    relatorio = tk.Toplevel(root)
    relatorio.title("‚ö†Ô∏è Relat√≥rio de Estoque Baixo")
    relatorio.geometry("650x380")
    relatorio.configure(bg="#fff8f0")

    tk.Label(relatorio, text="RELAT√ìRIO DE ESTOQUE BAIXO", font=("Arial", 15, "bold"), bg="#FF9800", fg="white", pady=10).pack(fill="x")

    colunas = ("C√≥digo", "Nome", "Quantidade")
    tabela = ttk.Treeview(relatorio, columns=colunas, show="headings")
    tabela.heading("C√≥digo", text="C√≥digo")
    tabela.heading("Nome", text="Produto")
    tabela.heading("Quantidade", text="Qtd")
    tabela.column("C√≥digo", width=120, anchor="center")
    tabela.column("Nome", width=360)
    tabela.column("Quantidade", width=120, anchor="center")
    tabela.pack(fill="both", expand=True, pady=10)

    # limite configur√°vel (aqui 5)
    limite = 5
    for p in estoque:
        if p["quantidade"] <= limite:
            tabela.insert("", "end", values=(p["codigo"], p["nome"], p["quantidade"]))

    tk.Button(relatorio, text="Fechar", bg="#9E9E9E", fg="white", width=18, command=relatorio.destroy).pack(pady=8)

# --------------------------
# Janela: Relat√≥rio de TODOS os Materiais
# --------------------------
def janela_relatorio_todos():
    rel = tk.Toplevel(root)
    rel.title("üìã Relat√≥rio Completo de Materiais")
    rel.geometry("760x500")
    rel.configure(bg="#f0f7ff")

    tk.Label(rel, text="RELAT√ìRIO COMPLETO - TODOS OS MATERIAIS", font=("Arial", 15, "bold"), bg="#1976D2", fg="white", pady=10).pack(fill="x")

    frame = tk.Frame(rel, bg="#f0f7ff")
    frame.pack(padx=10, pady=10, fill="both", expand=True)

    colunas = ("C√≥digo", "Nome", "Quantidade")
    tabela = ttk.Treeview(frame, columns=colunas, show="headings")
    tabela.heading("C√≥digo", text="C√≥digo")
    tabela.heading("Nome", text="Nome")
    tabela.heading("Quantidade", text="Quantidade")
    tabela.column("C√≥digo", width=120, anchor="center")
    tabela.column("Nome", width=460)
    tabela.column("Quantidade", width=120, anchor="center")
    tabela.pack(side="left", fill="both", expand=True)

    vsb = ttk.Scrollbar(frame, orient="vertical", command=tabela.yview)
    tabela.configure(yscroll=vsb.set)
    vsb.pack(side="left", fill="y")

    # popula a tabela com TODOS os produtos
    for p in estoque:
        tabela.insert("", "end", values=(p["codigo"], p["nome"], p["quantidade"]))

    # resumo simples: total de itens distintos e soma das quantidades
    total_distintos = len(estoque)
    total_unidades = sum([p["quantidade"] for p in estoque])

    lbl_resumo = tk.Label(rel, text=f"Total de itens distintos: {total_distintos}    |    Total de unidades no estoque: {total_unidades}", bg="#f0f7ff", font=("Arial", 11))
    lbl_resumo.pack(pady=8)

    # bot√£o opcional para exportar em CSV (arquivo 'relatorio_todos.csv')
    def exportar_csv():
        caminho = "relatorio_todos.csv"
        try:
            with open(caminho, "w", newline="", encoding="utf-8") as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(["C√≥digo", "Nome", "Quantidade"])
                for p in estoque:
                    writer.writerow([p["codigo"], p["nome"], p["quantidade"]])
            messagebox.showinfo("Exportado", f"Relat√≥rio exportado para '{caminho}'.")
        except Exception as e:
            messagebox.showerror("Erro", f"Falha ao exportar CSV: {e}")

    btn_export = tk.Button(rel, text="Exportar para CSV", bg="#4CAF50", fg="white", command=exportar_csv)
    btn_export.pack(pady=6)
    tk.Button(rel, text="Fechar", bg="#9E9E9E", fg="white", width=18, command=rel.destroy).pack(pady=6)

# --------------------------
# TELA PRINCIPAL (menu)
# --------------------------
root = tk.Tk()
root.title("üìä Sistema de Controle de Estoque - v3")
root.geometry("520x520")
root.configure(bg="#E3F2FD")

tk.Label(root, text="SISTEMA DE ESTOQUE", font=("Arial", 18, "bold"), bg="#1976D2", fg="white", pady=14).pack(fill="x")

frame_botoes = tk.Frame(root, bg="#E3F2FD")
frame_botoes.pack(expand=True, pady=20)

tk.Button(frame_botoes, text="üì¶ Cadastrar Produto", bg="#4CAF50", fg="white", font=("Arial", 12, "bold"), width=30, command=janela_cadastro).pack(pady=8)
tk.Button(frame_botoes, text="üîç Consultar / Pesquisar", bg="#2196F3", fg="white", font=("Arial", 12, "bold"), width=30, command=janela_consulta).pack(pady=8)
tk.Button(frame_botoes, text="‚¨áÔ∏è Dar Baixa no Estoque", bg="#FF9800", fg="white", font=("Arial", 12, "bold"), width=30, command=janela_dar_baixa).pack(pady=8)
tk.Button(frame_botoes, text="‚ö†Ô∏è Relat√≥rio de Estoque Baixo", bg="#FF7043", fg="white", font=("Arial", 12, "bold"), width=30, command=janela_estoque_baixo).pack(pady=8)
tk.Button(frame_botoes, text="üìã Relat√≥rio Completo (Todos os Materiais)", bg="#6A1B9A", fg="white", font=("Arial", 12, "bold"), width=30, command=janela_relatorio_todos).pack(pady=8)

tk.Button(root, text="üö™ Sair do Sistema", bg="#E53935", fg="white", font=("Arial", 12, "bold"), width=24, command=root.destroy).pack(pady=8)

tk.Label(root, text="¬© 2025 - Sistema de Estoque | v3 ‚Ä¢ Dados salvos em estoque.json", bg="#1976D2", fg="white", pady=8).pack(fill="x", side="bottom")

root.mainloop()
