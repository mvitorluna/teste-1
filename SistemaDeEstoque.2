import tkinter as tk
from tkinter import ttk, messagebox
import json
import os

# ==========================================================
# SISTEMA DE CONTROLE DE ESTOQUE COMPLETO (v2)
# Agora com armazenamento autom√°tico em arquivo JSON!
# ==========================================================

ARQUIVO_ESTOQUE = "estoque.json"

# ----------------------------------------------------------
# Fun√ß√µes de salvar e carregar dados
# ----------------------------------------------------------
def carregar_estoque():
    if os.path.exists(ARQUIVO_ESTOQUE):
        try:
            with open(ARQUIVO_ESTOQUE, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            messagebox.showwarning("Erro", "Arquivo de dados corrompido. Criando novo estoque...")
            return []
    return []


def salvar_estoque():
    with open(ARQUIVO_ESTOQUE, "w", encoding="utf-8") as f:
        json.dump(estoque, f, indent=4, ensure_ascii=False)


# ----------------------------------------------------------
# Carrega os produtos ao iniciar o sistema
# ----------------------------------------------------------
estoque = carregar_estoque()


# ----------------------------------------------------------
# Atualiza uma tabela espec√≠fica
# ----------------------------------------------------------
def atualizar_tabela(tabela):
    for item in tabela.get_children():
        tabela.delete(item)

    for produto in estoque:
        tabela.insert("", "end", values=(produto["codigo"], produto["nome"], produto["quantidade"]))


# ----------------------------------------------------------
# JANELA: Cadastro de produtos
# ----------------------------------------------------------
def janela_cadastro():
    cadastro = tk.Toplevel(root)
    cadastro.title("üì¶ Cadastro de Produtos")
    cadastro.geometry("500x400")
    cadastro.configure(bg="#f4f7ff")

    tk.Label(cadastro, text="CADASTRO DE PRODUTOS", font=("Arial", 15, "bold"), bg="#3F51B5", fg="white", pady=10).pack(fill="x")

    frame = tk.Frame(cadastro, bg="#f4f7ff")
    frame.pack(pady=20)

    tk.Label(frame, text="C√≥digo:", bg="#f4f7ff", font=("Arial", 11)).grid(row=0, column=0, padx=5, pady=5)
    entrada_codigo = tk.Entry(frame, width=30)
    entrada_codigo.grid(row=0, column=1, padx=5, pady=5)

    tk.Label(frame, text="Nome:", bg="#f4f7ff", font=("Arial", 11)).grid(row=1, column=0, padx=5, pady=5)
    entrada_nome = tk.Entry(frame, width=30)
    entrada_nome.grid(row=1, column=1, padx=5, pady=5)

    tk.Label(frame, text="Quantidade:", bg="#f4f7ff", font=("Arial", 11)).grid(row=2, column=0, padx=5, pady=5)
    entrada_qtd = tk.Entry(frame, width=30)
    entrada_qtd.grid(row=2, column=1, padx=5, pady=5)

    def salvar_produto():
        codigo = entrada_codigo.get().strip()
        nome = entrada_nome.get().strip()
        qtd = entrada_qtd.get().strip()

        if codigo == "" or nome == "" or qtd == "":
            messagebox.showwarning("‚ö†Ô∏è Aten√ß√£o", "Preencha todos os campos!")
            return

        for p in estoque:
            if p["codigo"] == codigo:
                messagebox.showwarning("Erro", "J√° existe um produto com esse c√≥digo!")
                return

        try:
            qtd = int(qtd)
        except ValueError:
            messagebox.showwarning("Erro", "Quantidade inv√°lida!")
            return

        estoque.append({"codigo": codigo, "nome": nome, "quantidade": qtd})
        salvar_estoque()  # üî• salva imediatamente ap√≥s o cadastro

        entrada_codigo.delete(0, tk.END)
        entrada_nome.delete(0, tk.END)
        entrada_qtd.delete(0, tk.END)

        messagebox.showinfo("‚úÖ Sucesso", f"Produto '{nome}' cadastrado!")

    tk.Button(cadastro, text="Salvar Produto", bg="#4CAF50", fg="white", font=("Arial", 11, "bold"), width=18, command=salvar_produto).pack(pady=15)
    tk.Button(cadastro, text="Fechar", bg="#9E9E9E", fg="white", width=18, command=cadastro.destroy).pack()


# ----------------------------------------------------------
# JANELA: Consulta e Pesquisa
# ----------------------------------------------------------
def janela_consulta():
    consulta = tk.Toplevel(root)
    consulta.title("üîç Consulta de Produtos")
    consulta.geometry("600x400")
    consulta.configure(bg="#f4f7ff")

    tk.Label(consulta, text="CONSULTA DE PRODUTOS", font=("Arial", 15, "bold"), bg="#2196F3", fg="white", pady=10).pack(fill="x")

    frame_busca = tk.Frame(consulta, bg="#f4f7ff")
    frame_busca.pack(pady=10)

    tk.Label(frame_busca, text="Pesquisar por nome ou c√≥digo:", bg="#f4f7ff").grid(row=0, column=0, padx=5)
    entrada_pesquisa = tk.Entry(frame_busca, width=30)
    entrada_pesquisa.grid(row=0, column=1, padx=5)

    colunas = ("C√≥digo", "Nome", "Quantidade")
    tabela = ttk.Treeview(consulta, columns=colunas, show="headings")
    tabela.heading("C√≥digo", text="C√≥digo")
    tabela.heading("Nome", text="Nome")
    tabela.heading("Quantidade", text="Quantidade")
    tabela.pack(fill="both", expand=True, pady=10)

    atualizar_tabela(tabela)

    def pesquisar():
        termo = entrada_pesquisa.get().strip().lower()
        for item in tabela.get_children():
            tabela.delete(item)

        for p in estoque:
            if termo in p["codigo"].lower() or termo in p["nome"].lower():
                tabela.insert("", "end", values=(p["codigo"], p["nome"], p["quantidade"]))

    tk.Button(frame_busca, text="Pesquisar", bg="#2196F3", fg="white", command=pesquisar).grid(row=0, column=2, padx=5)
    tk.Button(consulta, text="Fechar", bg="#9E9E9E", fg="white", width=18, command=consulta.destroy).pack(pady=5)


# ----------------------------------------------------------
# JANELA: Relat√≥rio de Estoque Baixo
# ----------------------------------------------------------
def janela_estoque_baixo():
    relatorio = tk.Toplevel(root)
    relatorio.title("‚ö†Ô∏è Relat√≥rio de Estoque Baixo")
    relatorio.geometry("550x350")
    relatorio.configure(bg="#fff8f0")

    tk.Label(relatorio, text="RELAT√ìRIO DE ESTOQUE BAIXO", font=("Arial", 15, "bold"), bg="#FF9800", fg="white", pady=10).pack(fill="x")

    colunas = ("C√≥digo", "Nome", "Quantidade")
    tabela = ttk.Treeview(relatorio, columns=colunas, show="headings")
    tabela.heading("C√≥digo", text="C√≥digo")
    tabela.heading("Nome", text="Produto")
    tabela.heading("Quantidade", text="Qtd")
    tabela.pack(fill="both", expand=True, pady=10)

    for p in estoque:
        if p["quantidade"] <= 5:
            tabela.insert("", "end", values=(p["codigo"], p["nome"], p["quantidade"]))

    tk.Button(relatorio, text="Fechar", bg="#9E9E9E", fg="white", width=18, command=relatorio.destroy).pack(pady=10)


# ----------------------------------------------------------
# TELA PRINCIPAL
# ----------------------------------------------------------
root = tk.Tk()
root.title("üìä Sistema de Controle de Estoque")
root.geometry("450x400")
root.configure(bg="#E3F2FD")

tk.Label(root, text="SISTEMA DE ESTOQUE", font=("Arial", 16, "bold"), bg="#1976D2", fg="white", pady=12).pack(fill="x")

frame_botoes = tk.Frame(root, bg="#E3F2FD")
frame_botoes.pack(expand=True)

tk.Button(frame_botoes, text="üì¶ Cadastrar Produto", bg="#4CAF50", fg="white", font=("Arial", 12, "bold"), width=25, command=janela_cadastro).pack(pady=10)
tk.Button(frame_botoes, text="üîç Consultar / Pesquisar", bg="#2196F3", fg="white", font=("Arial", 12, "bold"), width=25, command=janela_consulta).pack(pady=10)
tk.Button(frame_botoes, text="‚ö†Ô∏è Relat√≥rio de Estoque Baixo", bg="#FF9800", fg="white", font=("Arial", 12, "bold"), width=25, command=janela_estoque_baixo).pack(pady=10)
tk.Button(frame_botoes, text="üö™ Sair do Sistema", bg="#E53935", fg="white", font=("Arial", 12, "bold"), width=25, command=root.destroy).pack(pady=10)

tk.Label(root, text="¬© 2025 - Sistema de Estoque | Feito em Python üêç", bg="#1976D2", fg="white", pady=6).pack(fill="x", side="bottom")

root.mainloop()
